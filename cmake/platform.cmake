set(output_dir  "${PROJECT_SOURCE_DIR}/output")
set (bin_dir "")
set (lib_dir "")

if(MSVC)
    message(STATUS "WINDOWS VS PLATFORM")
	add_definitions(-D__WIN__)
	add_definitions(-D__SSE__)
	
    #add_definitions (-DUNICODE)
    #add_definitions (-D_UNICODE)
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD")
	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MD")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
	set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MDd")
    
	if (CMAKE_SIZEOF_VOID_P EQUAL 8)
        # 64bit
		add_definitions(-D__WIN64__)
		set (bin_dir "${output_dir}/bin/intelwin_x86_64")
        set (lib_dir "${output_dir}/lib/intelwin_x86_64")
    elseif (CMAKE_SIZEOF_VOID_P EQUAL 4)
		# 32bit
		add_definitions(-D__WIN32__)
        set (bin_dir "${output_dir}/bin/intelwin_x86")
        set (lib_dir "${output_dir}/lib/intelwin_x86")
    endif ()
elseif (CMAKE_SYSTEM_NAME STREQUAL "QNX")
	message(STATUS "QNX PLATFORM")
	add_definitions(-D__QNX__)
	if (BUILD_QNX700)
		message(STATUS "QNX700 PLATFORM")
		set (bin_dir "${output_dir}/bin/qnx700")
        set (lib_dir "${output_dir}/lib/qnx700")
	endif ()
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    add_definitions(-D__LINUX__)
    if (BUILD_INTEL_64)
		message(STATUS "INTEL LINUX x64  PLATFORM")
		add_definitions(-D__X86_64__)
        set (bin_dir "${output_dir}/bin/intellinux64")
        set (lib_dir "${output_dir}/lib/intellinux64")
    elseif (BUILD_ARMLINUX_32)
		message(STATUS "ARMLINUX arm PLATFORM")
        set (bin_dir "${output_dir}/bin/armlinux32")
        set (lib_dir "${output_dir}/lib/armlinux32")
    elseif (BUILD_ARMLINUX_64)
		message(STATUS "ARMLINUX aarch64 PLATFORM")
        set (bin_dir "${output_dir}/bin/armlinux64")
        set (lib_dir "${output_dir}/lib/armlinux64")	
    endif ()
    find_package (Threads)
    set (CMAKE_EXE_LINKER_FLAGS "-lpthread")
elseif (CMAKE_SYSTEM_NAME STREQUAL "Android")
	add_definitions(-D__ANDROID__)
	if (ARM_OPENMP)
		find_package(OpenMP)
		if (OPENMP_FOUND)
			message(STATUS "############################################################################OPENMP_FOUND ")
			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}" ${OpenMP_C_FLAGS})
			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" ${OpenMP_CXX_FLAGS})
			set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}" ${OpenMP_EXE_LINKER_FLAGS})
		endif ()
	endif ()
    
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fvisibility=hidden")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden")
	
	if (BUILD_ARMEABI_V7A)
		add_definitions(-D__ARM__)
		add_definitions(-D__ARM_NEON__)
		if(ANDROID_TOOLCHAIN STREQUAL clang)
			message(STATUS "############################################################################clang ")
			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mfloat-abi=softfp -mfpu=neon -marm -fsigned-char -O2")
			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CPP11} -fpermissive -mfloat-abi=softfp -mfpu=neon -marm -fsigned-char -O2")		
		else()
			message(STATUS "############################################################################gcc ")
			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mfloat-abi=softfp -mfpu=neon -marm -pie -fsigned-char -O2")
			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CPP11} -fpermissive -mfloat-abi=softfp -mfpu=neon -marm -pie -fsigned-char -O2")
			set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS} -s")
			set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -s")
		endif()
		
        set (bin_dir "${output_dir}/bin/armeabi-v7a")
        set (lib_dir "${output_dir}/lib/armeabi-v7a")

	elseif (BUILD_ARM64_V8A)
		add_definitions(-D__AARCH64__)
		add_definitions(-D__ARM_NEON__)
		if(ANDROID_TOOLCHAIN STREQUAL clang)
			add_definitions(-D_SIZE_T_DEFINED)
		endif()
        if(ANDROID_TOOLCHAIN STREQUAL clang)
			message(STATUS "############################################################################clang ")
			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fexceptions -frtti -fsigned-char -O2")
			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CPP11} -fpermissive -fexceptions -frtti -fsigned-char -O2")	
		else()
			message(STATUS "############################################################################gcc ")
			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pie -fexceptions -frtti -fsigned-char -O2")
			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CPP11} -fpermissive -pie -fexceptions -frtti -fsigned-char -O2")
			set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS} -s")
			set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -s")
		endif()
		
		set (bin_dir "${output_dir}/bin/arm64-v8a")
        set (lib_dir "${output_dir}/lib/arm64-v8a")
    endif ()
elseif (APPLE)
    add_definitions(-D__APPLE__)
	if (BUILD_IOS_DEVICES)
		add_definitions(-D__IOS_DEVICES__)
        set (bin_dir "${output_dir}/bin/ios_devices")
        set (lib_dir "${output_dir}/lib/ios_devices")
	elseif (BUILD_IOS_SIMULATOR64)
		add_definitions(-D__IOS_SIMULATOR64__)
        set (bin_dir "${output_dir}/bin/ios_simulator64")
        set (lib_dir "${output_dir}/lib/ios_simulator64")
    endif ()
endif ()

if(NOT DEFINED CMAKE_LIBRARY_OUTPUT_DIRECTORY)
	set (CMAKE_LIBRARY_OUTPUT_DIRECTORY "${bin_dir}")
	message(STATUS "############set CMAKE_LIBRARY_OUTPUT_DIRECTORY : ${CMAKE_LIBRARY_OUTPUT_DIRECTORY} ")
endif()

if(NOT DEFINED CMAKE_RUNTIME_OUTPUT_DIRECTORY)
	set (CMAKE_RUNTIME_OUTPUT_DIRECTORY "${bin_dir}")
	message(STATUS "############set CMAKE_RUNTIME_OUTPUT_DIRECTORY : ${CMAKE_RUNTIME_OUTPUT_DIRECTORY} ")
endif()

if(NOT DEFINED CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
	set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${lib_dir}")
	message(STATUS "############set CMAKE_ARCHIVE_OUTPUT_DIRECTORY : ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY} ")
endif()
